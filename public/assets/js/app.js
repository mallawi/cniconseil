/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

eval("(function() {\n    \"use strict\";\n\n    // constructor function for XMLHttpRequest that return a promise\n    function XHRequest(progress) {\n\n        var pCb = progress;\n\n        function ajaxReq(method, url, data) {\n            var promise = new Promise( function (resolve, reject) {\n                var xhr = new XMLHttpRequest();\n\n                if (pCb) {\n                    xhr.addEventListener(\"progress\", pCb.progress);\n                    xhr.addEventListener(\"load\", pCb.load);\n                }\n\n                if (method === \"GET\") {\n                    xhr.responseType = \"document\";\n                }\n                    \n                xhr.open(method, url);\n\n                if (data)\n                    xhr.send(data);  \n                else\n                    xhr.send();\n\n                xhr.onreadystatechange = function() {\n                    if (this.readyState === 4) {\n                        if (this.status === 200) {\n                            resolve(this.response);\n                        } else {\n                            reject(this.status);\n                        }\n                    } else {\n                        \n                    }\n                }\n            });\n\n            return promise;\n        }\n\n        return {\n            get: function(url) {\n                return ajaxReq(\"GET\", url);\n            },\n            post: function(url, data) {\n                if (data) { return ajaxReq(\"POST\", url, data); }\n                return ajaxReq(\"POST\", url);\n            }\n        }\n\n    }\n\n    var formsHandler;\n\n    function FormsHandler() { // constructor function for forms handling\n\n        return {\n            init: function() {\n                var formsItems = document.getElementsByClassName(\"forms--item\");\n\n                if (formsItems) {\n                    for (var i = 0; i < formsItems.length; i++) {\n                        formsItems[i].addEventListener(\"click\", function(ev) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            console.log(this);\n                            formsGetHandler(this);\n                        });\n                    }\n                } else if (document.forms) {\n                    this.handle.listen();\n                } else {\n                    return;\n                }\n            },\n            makeChanges: function(data) {\n                var requestedData = data,\n                    formHolder = document.getElementById(\"form--container\"),\n                    requestedForm = requestedData.getElementById(\"form--wrap\");\n\n                if (formHolder.classList.contains(\"form--shown\")) { // replace the form if other shown\n                    // this.handle.replace(formHolder, requestedForm);\n                    var oldForm = document.getElementById(\"form--wrap\");\n                    formHolder.replaceChild(requestedForm, oldForm);\n                    this.formRef.current.classList.add(\"forms--item-current\");\n                    this.formRef.old.classList.remove(\"forms--item-current\");\n                    this.formRef.old = this.formRef.current;\n\n                    this.handle.listen();\n                    console.log(\"replaced\");\n                } else { // if no form shown add\n                    formHolder.classList.add(\"form--shown\");\n                    this.formRef.current.classList.add(\"forms--item-current\");\n                    formHolder.appendChild(requestedForm);\n                    this.formRef.old = this.formRef.current;\n            \n                    this.handle.listen();\n\n                    console.log(\"added\");\n                }\n            },\n            formRef: { // forms references, current for requested, and old for the last\n                old: null,\n                current: null\n            },\n            handle: { // listening for form submition and handling it\n                listen: function() {\n                    var formEl =  document.forms[0];\n\n                    console.log(formEl);\n                    \n                    formEl.addEventListener(\"submit\", function(ev) {\n                        ev.preventDefault();\n\n                        formsPostHandler(formEl); // sending the form to be posted to server\n                        return false;\n                    });\n\n                    formEl.addEventListener(\"reset\", function(ev) {\n                        formsHandler.handle.remove();\n                        return;\n                    });\n                },\n                remove: function() {\n                    var oldForm = document.getElementById(\"form--wrap\"),\n                        formHolder = document.getElementById(\"form--container\");\n\n                    formHolder.removeChild(oldForm);\n                    formHolder.classList.remove(\"form--shown\");\n                    formsHandler.formRef.old.classList.remove(\"forms--item-current\");\n                }\n            }\n        }\n    }\n\n\n    function formsGetHandler(formItem) {\n        var currentFormRef = formItem;\n\n        var responseHandler = {\n            success: function(data) {\n                formsHandler.makeChanges(data);\n            },\n            failed: function(status) {\n                console.log(status);\n            }\n        },\n        progressCb = {\n            progress: function(ev) {\n                currentFormRef.classList.add(\"form--item-progress\");\n            },\n            load: function(ev) {\n                currentFormRef.classList.remove(\"form--item-progress\");\n            }\n        }\n\n        function getForms() {\n            formsHandler.formRef.current = formItem;\n\n            var typeAttr = formItem.getAttribute(\"data-type\");\n\n            if (formItem.classList.contains(\"forms--item-current\")) {\n                 if (formsHandler.formRef.old && formItem === formsHandler.formRef.old) {\n                    formsHandler.handle.remove();\n                    return;\n                }\n            }\n\n            var url = \"/form/\" + typeAttr,\n                xhrequest = new XHRequest(progressCb);\n\n            xhrequest.get(url).then(responseHandler.success).catch(responseHandler.failed);\n        }\n\n        if (formItem) {\n            getForms();\n        }\n    }\n\n\n    function formsPostHandler(formEl) {\n        var formData = new FormData(formEl);\n\n        for (var eItem = 0; eItem < formEl.elements.length; eItem++) {\n            if (formEl.elements[eItem].tagName.toUpperCase() === \"BUTTON\") { continue; }\n            if (!formEl.elements[eItem].required && !formEl.elements[eItem].value) {\n                formData.set(formEl.elements[eItem].name, 11111);\n            }\n        }\n        \n        console.log(formEl.id);\n\n        // switch(formEl.id) {\n        //     case \"\":\n        //     break;\n        // }\n        return;\n\n        var formAction = formEl.getAttribute(\"data-action\");\n\n        var progressCb = {\n            progress: function(ev) {\n\n            },\n            load: function(ev) {\n                // console.log(ev);\n            }\n        },\n        responseHandler = {\n            success: function(data) {\n                formsHandler.handle.remove();\n\n                var confirmMsg = document.getElementById(\"form--confirmation-message\");\n                confirmMsg.classList.add(\"message--shown\");\n\n                var msgTimeout = setTimeout(function() {\n                    confirmMsg.classList.remove(\"message--shown\");\n                    clearTimeout(msgTimeout);\n                }, 5000);\n\n                console.log(data);\n            },\n            failed: function(status) {\n                console.log(status);\n            }\n        }\n        \n        var xhrequest = new XHRequest(progressCb);\n        xhrequest.post(formAction, formData).then(responseHandler.success).catch(responseHandler.failed);\n    }\n\n\n    // function handler for handling sliders\n    function Slider(cls) {\n        var cls = cls,\n            itemInterval = null,\n             self = this;\n\n        this.currentIdx = null;\n\n        this.stopInterval = function() {\n            clearInterval(this.itemInterval);\n        }\n\n        // making changes to the slider\n        this.changeSliderItem = function(current, item, cls) {\n            current.classList.remove(cls);\n            item.classList.add(cls);\n            this.currentIdx = item;\n        }\n\n        this.intervalSliderItem = function(items, currentItem) {\n            self.currentIdx = currentItem;\n            this.itemInterval = setInterval(function() {\n                if (self.currentIdx) {\n                    for (var idx = 0; idx < items.length; idx++) {\n                        if (self.currentIdx === items[idx]) {\n                            var item = idx - 1;\n                            if (idx - 1 < 0) {\n                                var item = items.length - 1;\n                            }\n                            self.changeSliderItem(self.currentIdx, items[item], cls);\n                            break;\n                        }\n                    }\n                }\n            }, 3000);\n        }\n    }\n\n\n    function slideAnnonceMain() {\n        var prevBtn,\n            nextBtn,\n            sliderBtns = document.getElementsByClassName(\"slider--btn\"),\n            sliderItems = document.getElementsByClassName(\"slider--item\"),\n            sliderHandler = new Slider(\"slider--item-current\");\n\n        if (!sliderBtns.length || !sliderItems.length) { return; }\n\n        // handler for btns and slider items\n        var btnsAction = {\n            previous: function(btn) {\n                if (nextBtn && nextBtn.disabled === true) {\n                    nextBtn.disabled = false;\n                }\n\n                for (var idx = 0; idx < sliderItems.length; idx++) {\n                    if (sliderItems[idx].classList.contains(\"slider--item-current\")) {\n                        if (idx + 1 === sliderItems.length ) {\n                            btn.disabled = true;\n                            return;\n                        }\n\n                        var item = idx + 1;\n\n                        sliderHandler.changeSliderItem(sliderItems[idx], sliderItems[item], \"slider--item-current\");\n                        break;\n                    }\n                }\n            },\n            next: function(btn) {\n                if (prevBtn && prevBtn.disabled === true) {\n                    prevBtn.disabled = false;\n                }\n\n                for (var idx = 0; idx < sliderItems.length; idx++) {\n                    if (sliderItems[idx].classList.contains(\"slider--item-current\")) {\n                        if (idx - 1 < 0 ) {\n                            btn.disabled = true;\n                            return;\n                        } \n\n                        var item = idx - 1;\n\n                        sliderHandler.changeSliderItem(sliderItems[idx], sliderItems[item], \"slider--item-current\");\n                        break;\n                    }\n                }\n            }\n        }\n\n        // event listener handler, determining the btn and calling the right action\n        function btnsHandler(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            sliderHandler.stopInterval();\n\n            switch(this.name) {\n                case \"previous--btn\":\n                    btnsAction.previous(this);\n                    prevBtn = this;\n                    break;\n                case \"next--btn\":\n                    btnsAction.next(this);\n                    nextBtn = this;\n                    break;\n            }\n\n        }\n\n        // loops to add event listeners to btns and iterating over slider items\n        for (var i = 0; i < sliderBtns.length; i++) {\n            sliderBtns[i].addEventListener(\"click\", btnsHandler);\n        }\n\n        for (var idx = 0; idx < sliderItems.length; idx++) {\n            if (idx === sliderItems.length - 1) {\n                sliderItems[idx].classList.add(\"slider--item-current\");\n                sliderHandler.intervalSliderItem(sliderItems, sliderItems[idx]);\n                break;\n            }\n        }\n        \n    }\n\n\n    function slideAnnoncesFig() {\n        var sliderHandler,\n            annoncesCellRef = {},\n            annoncesCell = document.getElementsByClassName(\"annonces--grid-cell\");\n\n        if (!annoncesCell) return;\n\n        for (var i = 0; i < annoncesCell.length; i++) {\n            var cellChildren = annoncesCell[i].children,\n                cell = annoncesCell[i];\n            annoncesCellRef[cell] = [];\n\n            sliderHandler = new Slider(\"annonces--fig-current\");\n\n            for (var ix = 0; ix < cellChildren.length; ix++) {\n\n                if (cellChildren[ix].tagName === \"FIGURE\") {\n                    annoncesCellRef[cell][ix] = cellChildren.item(ix);\n\n                    if (ix === 0) {\n                        cellChildren.item(ix).classList.add(\"annonces--fig-current\");\n                        sliderHandler.intervalSliderItem(annoncesCellRef[cell], cellChildren.item(ix));\n                    }\n                }\n            }\n            console.log(sliderHandler);\n        }\n    }\n\n    function annonceGalleryHandler() {\n        var gallery = document.getElementsByClassName(\"annonce--gallery-wrap\")[0],\n            cellItem = document.getElementsByClassName(\"annonce--item-cell\")[0],\n            cellItems = document.getElementsByClassName(\"annonce--items-cell\");\n\n        if (!gallery) return;\n\n        for (var i = 0; i < cellItems.length; i++) {\n            cellItems[i].addEventListener(\"click\", function(ev) {\n                ev.preventDefault();\n                var fig = this.innerHTML;\n                this.innerHTML = cellItem.innerHTML;\n                cellItem.innerHTML = fig;\n            });\n        }\n    } \n\n\n    function init() {\n        console.log(\"document ready!\");\n    }\n\n\n    function navHandler() {\n        var hamBtn = document.getElementById(\"ham--button\"),\n            nav = document.getElementById(\"main--nav\");\n\n        hamBtn.addEventListener(\"click\", function(ev) {\n            ev.preventDefault();\n\n           if (!nav.classList.contains(\"nav--shown\")) {\n                nav.classList.add(\"nav--shown\");\n           } else {\n               nav.classList.remove(\"nav--shown\");\n           }\n        });\n    } \n\n    document.onreadystatechange = function() {\n        if (document.readyState === \"complete\") {\n            init();\n            navHandler();\n            formsHandler = new FormsHandler();\n            formsHandler.init();          \n            slideAnnonceMain();\n            slideAnnoncesFig();\n            annonceGalleryHandler();\n        }\n    }\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);