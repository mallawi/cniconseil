/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

eval("(function() {\n    \"use strict\";\n\n    // constructor function for XMLHttpRequest that return a promise\n    function XHRequest(progress) {\n\n        var pCb = progress;\n\n        function ajaxReq(method, url, data) {\n            var promise = new Promise( function (resolve, reject) {\n                var xhr = new XMLHttpRequest();\n\n                if (pCb) {\n                    xhr.addEventListener(\"progress\", pCb.progress);\n                    xhr.addEventListener(\"load\", pCb.load);\n                }\n\n                if (method === \"GET\") {\n                    xhr.responseType = \"document\";\n                }\n                    \n                xhr.open(method, url);\n\n                if (data)\n                    xhr.send(data);  \n                else\n                    xhr.send();\n\n                xhr.onreadystatechange = function() {\n                    if (this.readyState === 4) {\n                        if (this.status === 200) {\n                            resolve(this.response);\n                        } else {\n                            reject(this.status);\n                        }\n                    } else {\n                        \n                    }\n                }\n            });\n\n            return promise;\n        }\n\n        return {\n            get: function(url) {\n                return ajaxReq(\"GET\", url);\n            },\n            post: function(url, data) {\n                if (data) { return ajaxReq(\"POST\", url, data); }\n                return ajaxReq(\"POST\", url);\n            }\n        }\n\n    }\n\n    var formsHandler;\n\n    function FormsHandler() {\n\n        return {\n            init: function() {\n                formsGetHandler();\n            },\n            makeChanges: function(data) {\n                var requestedData = data;\n                var formHolder = document.getElementById(\"form--container\");\n                var requestedForm = requestedData.getElementById(\"form--wrap\");\n\n                if (formHolder.classList.contains(\"form--shown\")) {\n                    // replace the form\n                    var oldForm = document.getElementById(\"form--wrap\");\n                    formHolder.replaceChild(requestedForm, oldForm);\n                    this.formRef.current.classList.add(\"forms--item-current\");\n                    this.formRef.old.classList.remove(\"forms--item-current\");\n                    this.formRef.old = this.formRef.current;\n\n                    this.formHandler.listen(formHolder.getElementsByClassName(\"form--btn\"));\n                    console.log(\"replaced\");\n                } else { // if no form shown add\n                    formHolder.classList.add(\"form--shown\");\n                    this.formRef.current.classList.add(\"forms--item-current\");\n                    formHolder.appendChild(requestedForm);\n                    this.formRef.old = this.formRef.current;\n            \n                    this.formHandler.listen(formHolder.getElementsByClassName(\"form--btn\"));\n\n                    console.log(\"added\");\n                }\n            },\n            formRef: {\n                old: null,\n                current: null\n            },\n            formHandler: {\n                listen: function(formBtns) {\n                    formBtns[0].addEventListener(\"click\", function() {\n                        console.log(this);\n                    });\n\n                    formBtns[1].addEventListener(\"click\", function(ev) {\n                        ev.preventDefault();\n                        formsPostHandler(document.forms[0]);\n                        console.log(document.forms[0]);\n                    });\n                }\n            }\n        }\n    }\n\n\n    function formsGetHandler() {\n        var formsItem = document.getElementsByClassName(\"forms--item\");\n        var currentFormRef;\n\n        var responseHandler = {\n            success: function(data) {\n                formsHandler.makeChanges(data);\n            },\n            failed: function(status) {\n                console.log(status);\n            }\n        }\n\n        var progressCb = {\n            progress: function(ev) {\n                currentFormRef.classList.add(\"form--item-progress\");\n            },\n            load: function(ev) {\n                currentFormRef.classList.remove(\"form--item-progress\");\n            }\n        }\n\n        function getForms(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            currentFormRef = this;\n            formsHandler.formRef.current = this;\n\n            var typeAttr = this.getAttribute(\"data-type\");\n\n            if (this.classList.contains(\"forms--item-current\")) {\n                 if (formsHandler.formRef.old && this === formsHandler.formRef.old) {\n                    var oldForm = document.getElementById(\"form--wrap\");\n                    var formHolder = document.getElementById(\"form--container\");\n                    formHolder.removeChild(oldForm);\n                    formHolder.classList.remove(\"form--shown\");\n                    currentFormRef.classList.remove(\"forms--item-current\");\n                    return;\n                }\n            }\n\n            var url = \"/form/\" + typeAttr;\n\n            var xhrequest = new XHRequest(progressCb);\n\n            xhrequest.get(url).then(responseHandler.success).catch(responseHandler.failed);\n        }\n\n        for (var i = 0; i < formsItem.length; i++) {\n            formsItem[i].addEventListener(\"click\", getForms);\n        }\n    }\n\n\n    function formsPostHandler(formEl) {\n        var formData = new FormData(formEl);\n        var formAction = formEl.getAttribute(\"data-action\");\n\n\n        var progressCb = {\n            progress: function(ev) {\n            },\n            load: function(ev) {\n                console.log(ev);\n            }\n        }\n\n        console.log(formData);\n\n        var responseHandler = {\n            success: function(data) {\n                console.log(data);\n            },\n            failed: function(status) {\n                console.log(status);\n            }\n        }\n        \n        var xhrequest = new XHRequest(progressCb);\n        xhrequest.post(formAction, formData).then(responseHandler.success).catch(responseHandler.failed);\n    }\n\n    // function handler for handling slider from the index page\n    function sliderHandler() {\n        var sliderBtns = document.getElementsByClassName(\"slider--btn\");\n        var sliderItems = document.getElementsByClassName(\"slider--item\");\n        var prevBtn;\n        var nextBtn;\n        var itemIdx;\n        var currentItem;\n\n        // making changes to the slider\n        function changeSliderItem(current, item) {\n            current.classList.remove(\"slider--item-current\");\n            item.classList.add(\"slider--item-current\");\n            \n        }\n        \n        // object for handling btns and slider items logicaly\n        var sControl = {\n            previous: function(btn) {\n                if (nextBtn && nextBtn.disabled === true) {\n                    nextBtn.disabled = false;\n                }\n\n                for (var idx = 0; idx < sliderItems.length; idx++) {\n                    if (sliderItems[idx].classList.contains(\"slider--item-current\")) {\n                        if (idx + 1 === sliderItems.length ) {\n                            btn.disabled = true;\n                            return;\n                        }\n\n                        var item = idx + 1;\n                        changeSliderItem(sliderItems[idx], sliderItems[item]);\n                        break;\n                    }\n                }\n            },\n            next: function(btn) {\n                if (prevBtn && prevBtn.disabled === true) {\n                    prevBtn.disabled = false;\n                }\n\n                for (var idx = 0; idx < sliderItems.length; idx++) {\n                    if (sliderItems[idx].classList.contains(\"slider--item-current\")) {\n                        if (idx - 1 < 0 ) {\n                            btn.disabled = true;\n                            return;\n                        } \n\n                        var item = idx - 1;\n                        changeSliderItem(sliderItems[idx], sliderItems[item]);\n                        break;\n                    }\n                }\n            }\n        }\n\n        // event listener handler, determining the btn and calling the right action\n        function sBtnHandler(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            switch(this.name) {\n                case \"previous--btn\":\n                    sControl.previous(this);\n                    prevBtn = this;\n                    break;\n                case \"next--btn\":\n                    sControl.next(this);\n                    nextBtn = this;\n                    break;\n            }\n\n        }\n\n\n        // for loops to add event listeners to btns and iterating over slider items\n        \n        for (var i = 0; i < sliderBtns.length; i++) {\n            sliderBtns[i].addEventListener(\"click\", sBtnHandler);\n        }\n\n        for (var idx = 0; idx < sliderItems.length; idx++) {\n            if (idx === sliderItems.length - 1) {\n                sliderItems[idx].classList.add(\"slider--item-current\");\n            }\n        }\n    }\n\n\n\n    function init() {\n        console.log(\"document ready!\");\n    }\n\n\n    function navHandler() {\n        var hamBtn = document.getElementById(\"ham--button\");\n        var nav = document.getElementById(\"main--nav\");\n\n        hamBtn.addEventListener(\"click\", function(ev) {\n            ev.preventDefault();\n\n           if (!nav.classList.contains(\"nav--shown\")) {\n                nav.classList.add(\"nav--shown\");\n           } else {\n               nav.classList.remove(\"nav--shown\");\n           }\n        });\n    } \n\n    document.onreadystatechange = function() {\n        if (document.readyState === \"complete\") {\n            init();\n            navHandler();\n            formsHandler = new FormsHandler();\n            formsHandler.init();\n            sliderHandler();\n        }\n    }\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);