/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

eval("(function() {\n    \"use strict\";\n\n    // constructor function for XMLHttpRequest that return a promise\n    function XHRequest(progress) {\n\n        var pCb = progress;\n\n        function ajaxReq(method, url, data) {\n            var promise = new Promise( function (resolve, reject) {\n                var xhr = new XMLHttpRequest();\n\n                if (pCb) {\n                    xhr.addEventListener(\"progress\", pCb.progress);\n                    xhr.addEventListener(\"load\", pCb.load);\n                }\n\n                if (method === \"GET\") {\n                    xhr.responseType = \"document\";\n                }\n                    \n                xhr.open(method, url);\n\n                if (data)\n                    xhr.send(data);  \n                else\n                    xhr.send();\n\n                xhr.onreadystatechange = function() {\n                    if (this.readyState === 4) {\n                        if (this.status === 200) {\n                            resolve(this.response);\n                        } else {\n                            reject(this.status);\n                        }\n                    } else {\n                        \n                    }\n                }\n            });\n\n            return promise;\n        }\n\n        return {\n            get: function(url) {\n                return ajaxReq(\"GET\", url);\n            },\n            post: function(url, data) {\n                if (data) { return ajaxReq(\"POST\", url, data); }\n                return ajaxReq(\"POST\", url);\n            }\n        }\n\n    }\n\n    var formsHandler;\n\n    function FormsHandler() { // constructor function for forms handling\n\n        return {\n            init: function() {\n                formsGetHandler();\n            },\n            makeChanges: function(data) {\n                var requestedData = data;\n                var formHolder = document.getElementById(\"form--container\");\n                var requestedForm = requestedData.getElementById(\"form--wrap\");\n\n                if (formHolder.classList.contains(\"form--shown\")) { // replace the form if other shown\n                    // this.handle.replace(formHolder, requestedForm);\n                    var oldForm = document.getElementById(\"form--wrap\");\n                    formHolder.replaceChild(requestedForm, oldForm);\n                    this.formRef.current.classList.add(\"forms--item-current\");\n                    this.formRef.old.classList.remove(\"forms--item-current\");\n                    this.formRef.old = this.formRef.current;\n\n                    this.handle.listen();\n                    console.log(\"replaced\");\n                } else { // if no form shown add\n                    formHolder.classList.add(\"form--shown\");\n                    this.formRef.current.classList.add(\"forms--item-current\");\n                    formHolder.appendChild(requestedForm);\n                    this.formRef.old = this.formRef.current;\n            \n                    this.handle.listen();\n\n                    console.log(\"added\");\n                }\n            },\n            formRef: { // forms references, current for requested, and old for the last\n                old: null,\n                current: null\n            },\n            handle: { // listening for form submition and handling it\n                listen: function() {\n                    var formEl =  document.forms[0];\n                    console.log(formEl);\n\n                    formEl.addEventListener(\"submit\", function(ev) {\n                        ev.preventDefault();\n\n                        formsPostHandler(formEl); // sending the form to be posted to server\n                        return false;\n                    });\n                },\n                remove: function() {\n                    var oldForm = document.getElementById(\"form--wrap\");\n                    var formHolder = document.getElementById(\"form--container\");\n                    formHolder.removeChild(oldForm);\n                    formHolder.classList.remove(\"form--shown\");\n                    formsHandler.formRef.old.classList.remove(\"forms--item-current\");\n                }\n            }\n        }\n    }\n\n\n    function formsGetHandler() {\n        var formsItem = document.getElementsByClassName(\"forms--item\");\n        var currentFormRef;\n\n        var responseHandler = {\n            success: function(data) {\n                formsHandler.makeChanges(data);\n            },\n            failed: function(status) {\n                console.log(status);\n            }\n        }\n\n        var progressCb = {\n            progress: function(ev) {\n                currentFormRef.classList.add(\"form--item-progress\");\n            },\n            load: function(ev) {\n                currentFormRef.classList.remove(\"form--item-progress\");\n            }\n        }\n\n        function getForms(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            currentFormRef = this;\n            formsHandler.formRef.current = this;\n\n            var typeAttr = this.getAttribute(\"data-type\");\n\n            if (this.classList.contains(\"forms--item-current\")) {\n                 if (formsHandler.formRef.old && this === formsHandler.formRef.old) {\n                    formsHandler.handle.remove();\n                    return;\n                }\n            }\n\n            var url = \"/form/\" + typeAttr;\n\n            var xhrequest = new XHRequest(progressCb);\n\n            xhrequest.get(url).then(responseHandler.success).catch(responseHandler.failed);\n        }\n\n        for (var i = 0; i < formsItem.length; i++) {\n            formsItem[i].addEventListener(\"click\", getForms);\n        }\n    }\n\n\n    function formsPostHandler(formEl) {\n        console.log(formEl.checkValidity());\n\n        var formData = new FormData(formEl);\n        var formAction = formEl.getAttribute(\"data-action\");\n\n\n        var progressCb = {\n            progress: function(ev) {\n\n            },\n            load: function(ev) {\n                // console.log(ev);\n            }\n        }\n\n        var responseHandler = {\n            success: function(data) {\n                formsHandler.handle.remove();\n\n                var confirmMsg = document.getElementById(\"form--confirmation-message\");\n                confirmMsg.classList.add(\"message--shown\");\n\n                var msgTimeout = setTimeout(function() {\n                    confirmMsg.classList.remove(\"message--shown\");\n                    clearTimeout(msgTimeout);\n                }, 5000);\n\n                console.log(data);\n            },\n            failed: function(status) {\n                console.log(status);\n            }\n        }\n        \n        var xhrequest = new XHRequest(progressCb);\n        xhrequest.post(formAction, formData).then(responseHandler.success).catch(responseHandler.failed);\n    }\n\n\n\n\n    // function handler for handling slider from the index page\n    function sliderHandler() {\n        var sliderBtns = document.getElementsByClassName(\"slider--btn\");\n        var sliderItems = document.getElementsByClassName(\"slider--item\");\n        var prevBtn;\n        var nextBtn;\n        var itemIdx;\n        var currentItem;\n\n        // making changes to the slider\n        function changeSliderItem(current, item) {\n            current.classList.remove(\"slider--item-current\");\n            item.classList.add(\"slider--item-current\");\n            \n        }\n        \n        // handler for btns and slider items\n        var sControl = {\n            previous: function(btn) {\n                if (nextBtn && nextBtn.disabled === true) {\n                    nextBtn.disabled = false;\n                }\n\n                for (var idx = 0; idx < sliderItems.length; idx++) {\n                    if (sliderItems[idx].classList.contains(\"slider--item-current\")) {\n                        if (idx + 1 === sliderItems.length ) {\n                            btn.disabled = true;\n                            return;\n                        }\n\n                        var item = idx + 1;\n                        changeSliderItem(sliderItems[idx], sliderItems[item]);\n                        break;\n                    }\n                }\n            },\n            next: function(btn) {\n                if (prevBtn && prevBtn.disabled === true) {\n                    prevBtn.disabled = false;\n                }\n\n                for (var idx = 0; idx < sliderItems.length; idx++) {\n                    if (sliderItems[idx].classList.contains(\"slider--item-current\")) {\n                        if (idx - 1 < 0 ) {\n                            btn.disabled = true;\n                            return;\n                        } \n\n                        var item = idx - 1;\n                        changeSliderItem(sliderItems[idx], sliderItems[item]);\n                        break;\n                    }\n                }\n            }\n        }\n\n        // event listener handler, determining the btn and calling the right action\n        function sBtnHandler(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            switch(this.name) {\n                case \"previous--btn\":\n                    sControl.previous(this);\n                    prevBtn = this;\n                    break;\n                case \"next--btn\":\n                    sControl.next(this);\n                    nextBtn = this;\n                    break;\n            }\n\n        }\n\n        // loops to add event listeners to btns and iterating over slider items\n        for (var i = 0; i < sliderBtns.length; i++) {\n            sliderBtns[i].addEventListener(\"click\", sBtnHandler);\n        }\n\n        for (var idx = 0; idx < sliderItems.length; idx++) {\n            if (idx === sliderItems.length - 1) {\n                sliderItems[idx].classList.add(\"slider--item-current\");\n            }\n        }\n    }\n\n\n\n    function init() {\n        console.log(\"document ready!\");\n    }\n\n\n    function navHandler() {\n        var hamBtn = document.getElementById(\"ham--button\");\n        var nav = document.getElementById(\"main--nav\");\n\n        hamBtn.addEventListener(\"click\", function(ev) {\n            ev.preventDefault();\n\n           if (!nav.classList.contains(\"nav--shown\")) {\n                nav.classList.add(\"nav--shown\");\n           } else {\n               nav.classList.remove(\"nav--shown\");\n           }\n        });\n    } \n\n    document.onreadystatechange = function() {\n        if (document.readyState === \"complete\") {\n            init();\n            navHandler();\n            formsHandler = new FormsHandler();\n            formsHandler.init();\n            sliderHandler();\n        }\n    }\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2FwcC5qcz84YjY3Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciBYTUxIdHRwUmVxdWVzdCB0aGF0IHJldHVybiBhIHByb21pc2VcbiAgICBmdW5jdGlvbiBYSFJlcXVlc3QocHJvZ3Jlc3MpIHtcblxuICAgICAgICB2YXIgcENiID0gcHJvZ3Jlc3M7XG5cbiAgICAgICAgZnVuY3Rpb24gYWpheFJlcShtZXRob2QsIHVybCwgZGF0YSkge1xuICAgICAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwQ2IpIHtcbiAgICAgICAgICAgICAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLCBwQ2IucHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgcENiLmxvYWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtZXRob2QgPT09IFwiR0VUXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IFwiZG9jdW1lbnRcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcblxuICAgICAgICAgICAgICAgIGlmIChkYXRhKVxuICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZChkYXRhKTsgIFxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QodGhpcy5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWpheFJlcShcIkdFVFwiLCB1cmwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvc3Q6IGZ1bmN0aW9uKHVybCwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7IHJldHVybiBhamF4UmVxKFwiUE9TVFwiLCB1cmwsIGRhdGEpOyB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFqYXhSZXEoXCJQT1NUXCIsIHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHZhciBmb3Jtc0hhbmRsZXI7XG5cbiAgICBmdW5jdGlvbiBGb3Jtc0hhbmRsZXIoKSB7IC8vIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciBmb3JtcyBoYW5kbGluZ1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmb3Jtc0dldEhhbmRsZXIoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYWtlQ2hhbmdlczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ZWREYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybUhvbGRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9ybS0tY29udGFpbmVyXCIpO1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ZWRGb3JtID0gcmVxdWVzdGVkRGF0YS5nZXRFbGVtZW50QnlJZChcImZvcm0tLXdyYXBcIik7XG5cbiAgICAgICAgICAgICAgICBpZiAoZm9ybUhvbGRlci5jbGFzc0xpc3QuY29udGFpbnMoXCJmb3JtLS1zaG93blwiKSkgeyAvLyByZXBsYWNlIHRoZSBmb3JtIGlmIG90aGVyIHNob3duXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuaGFuZGxlLnJlcGxhY2UoZm9ybUhvbGRlciwgcmVxdWVzdGVkRm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb3JtLS13cmFwXCIpO1xuICAgICAgICAgICAgICAgICAgICBmb3JtSG9sZGVyLnJlcGxhY2VDaGlsZChyZXF1ZXN0ZWRGb3JtLCBvbGRGb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtUmVmLmN1cnJlbnQuY2xhc3NMaXN0LmFkZChcImZvcm1zLS1pdGVtLWN1cnJlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVJlZi5vbGQuY2xhc3NMaXN0LnJlbW92ZShcImZvcm1zLS1pdGVtLWN1cnJlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVJlZi5vbGQgPSB0aGlzLmZvcm1SZWYuY3VycmVudDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZS5saXN0ZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXBsYWNlZFwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBubyBmb3JtIHNob3duIGFkZFxuICAgICAgICAgICAgICAgICAgICBmb3JtSG9sZGVyLmNsYXNzTGlzdC5hZGQoXCJmb3JtLS1zaG93blwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtUmVmLmN1cnJlbnQuY2xhc3NMaXN0LmFkZChcImZvcm1zLS1pdGVtLWN1cnJlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1Ib2xkZXIuYXBwZW5kQ2hpbGQocmVxdWVzdGVkRm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVJlZi5vbGQgPSB0aGlzLmZvcm1SZWYuY3VycmVudDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZS5saXN0ZW4oKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFkZGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JtUmVmOiB7IC8vIGZvcm1zIHJlZmVyZW5jZXMsIGN1cnJlbnQgZm9yIHJlcXVlc3RlZCwgYW5kIG9sZCBmb3IgdGhlIGxhc3RcbiAgICAgICAgICAgICAgICBvbGQ6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudDogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZTogeyAvLyBsaXN0ZW5pbmcgZm9yIGZvcm0gc3VibWl0aW9uIGFuZCBoYW5kbGluZyBpdFxuICAgICAgICAgICAgICAgIGxpc3RlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtRWwgPSAgZG9jdW1lbnQuZm9ybXNbMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZvcm1FbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9ybUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1zUG9zdEhhbmRsZXIoZm9ybUVsKTsgLy8gc2VuZGluZyB0aGUgZm9ybSB0byBiZSBwb3N0ZWQgdG8gc2VydmVyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvcm0tLXdyYXBcIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtSG9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb3JtLS1jb250YWluZXJcIik7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1Ib2xkZXIucmVtb3ZlQ2hpbGQob2xkRm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1Ib2xkZXIuY2xhc3NMaXN0LnJlbW92ZShcImZvcm0tLXNob3duXCIpO1xuICAgICAgICAgICAgICAgICAgICBmb3Jtc0hhbmRsZXIuZm9ybVJlZi5vbGQuY2xhc3NMaXN0LnJlbW92ZShcImZvcm1zLS1pdGVtLWN1cnJlbnRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBmb3Jtc0dldEhhbmRsZXIoKSB7XG4gICAgICAgIHZhciBmb3Jtc0l0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZm9ybXMtLWl0ZW1cIik7XG4gICAgICAgIHZhciBjdXJyZW50Rm9ybVJlZjtcblxuICAgICAgICB2YXIgcmVzcG9uc2VIYW5kbGVyID0ge1xuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvcm1zSGFuZGxlci5tYWtlQ2hhbmdlcyhkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWlsZWQ6IGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJvZ3Jlc3NDYiA9IHtcbiAgICAgICAgICAgIHByb2dyZXNzOiBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRGb3JtUmVmLmNsYXNzTGlzdC5hZGQoXCJmb3JtLS1pdGVtLXByb2dyZXNzXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEZvcm1SZWYuY2xhc3NMaXN0LnJlbW92ZShcImZvcm0tLWl0ZW0tcHJvZ3Jlc3NcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRGb3Jtcyhldikge1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICBjdXJyZW50Rm9ybVJlZiA9IHRoaXM7XG4gICAgICAgICAgICBmb3Jtc0hhbmRsZXIuZm9ybVJlZi5jdXJyZW50ID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHR5cGVBdHRyID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXR5cGVcIik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucyhcImZvcm1zLS1pdGVtLWN1cnJlbnRcIikpIHtcbiAgICAgICAgICAgICAgICAgaWYgKGZvcm1zSGFuZGxlci5mb3JtUmVmLm9sZCAmJiB0aGlzID09PSBmb3Jtc0hhbmRsZXIuZm9ybVJlZi5vbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybXNIYW5kbGVyLmhhbmRsZS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHVybCA9IFwiL2Zvcm0vXCIgKyB0eXBlQXR0cjtcblxuICAgICAgICAgICAgdmFyIHhocmVxdWVzdCA9IG5ldyBYSFJlcXVlc3QocHJvZ3Jlc3NDYik7XG5cbiAgICAgICAgICAgIHhocmVxdWVzdC5nZXQodXJsKS50aGVuKHJlc3BvbnNlSGFuZGxlci5zdWNjZXNzKS5jYXRjaChyZXNwb25zZUhhbmRsZXIuZmFpbGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybXNJdGVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3Jtc0l0ZW1baV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGdldEZvcm1zKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gZm9ybXNQb3N0SGFuZGxlcihmb3JtRWwpIHtcbiAgICAgICAgY29uc29sZS5sb2coZm9ybUVsLmNoZWNrVmFsaWRpdHkoKSk7XG5cbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm1FbCk7XG4gICAgICAgIHZhciBmb3JtQWN0aW9uID0gZm9ybUVsLmdldEF0dHJpYnV0ZShcImRhdGEtYWN0aW9uXCIpO1xuXG5cbiAgICAgICAgdmFyIHByb2dyZXNzQ2IgPSB7XG4gICAgICAgICAgICBwcm9ncmVzczogZnVuY3Rpb24oZXYpIHtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3BvbnNlSGFuZGxlciA9IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBmb3Jtc0hhbmRsZXIuaGFuZGxlLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpcm1Nc2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvcm0tLWNvbmZpcm1hdGlvbi1tZXNzYWdlXCIpO1xuICAgICAgICAgICAgICAgIGNvbmZpcm1Nc2cuY2xhc3NMaXN0LmFkZChcIm1lc3NhZ2UtLXNob3duXCIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1zZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maXJtTXNnLmNsYXNzTGlzdC5yZW1vdmUoXCJtZXNzYWdlLS1zaG93blwiKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG1zZ1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH0sIDUwMDApO1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFpbGVkOiBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgeGhyZXF1ZXN0ID0gbmV3IFhIUmVxdWVzdChwcm9ncmVzc0NiKTtcbiAgICAgICAgeGhyZXF1ZXN0LnBvc3QoZm9ybUFjdGlvbiwgZm9ybURhdGEpLnRoZW4ocmVzcG9uc2VIYW5kbGVyLnN1Y2Nlc3MpLmNhdGNoKHJlc3BvbnNlSGFuZGxlci5mYWlsZWQpO1xuICAgIH1cblxuXG5cblxuICAgIC8vIGZ1bmN0aW9uIGhhbmRsZXIgZm9yIGhhbmRsaW5nIHNsaWRlciBmcm9tIHRoZSBpbmRleCBwYWdlXG4gICAgZnVuY3Rpb24gc2xpZGVySGFuZGxlcigpIHtcbiAgICAgICAgdmFyIHNsaWRlckJ0bnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic2xpZGVyLS1idG5cIik7XG4gICAgICAgIHZhciBzbGlkZXJJdGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzbGlkZXItLWl0ZW1cIik7XG4gICAgICAgIHZhciBwcmV2QnRuO1xuICAgICAgICB2YXIgbmV4dEJ0bjtcbiAgICAgICAgdmFyIGl0ZW1JZHg7XG4gICAgICAgIHZhciBjdXJyZW50SXRlbTtcblxuICAgICAgICAvLyBtYWtpbmcgY2hhbmdlcyB0byB0aGUgc2xpZGVyXG4gICAgICAgIGZ1bmN0aW9uIGNoYW5nZVNsaWRlckl0ZW0oY3VycmVudCwgaXRlbSkge1xuICAgICAgICAgICAgY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKFwic2xpZGVyLS1pdGVtLWN1cnJlbnRcIik7XG4gICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoXCJzbGlkZXItLWl0ZW0tY3VycmVudFwiKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBoYW5kbGVyIGZvciBidG5zIGFuZCBzbGlkZXIgaXRlbXNcbiAgICAgICAgdmFyIHNDb250cm9sID0ge1xuICAgICAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKGJ0bikge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0QnRuICYmIG5leHRCdG4uZGlzYWJsZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IHNsaWRlckl0ZW1zLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlckl0ZW1zW2lkeF0uY2xhc3NMaXN0LmNvbnRhaW5zKFwic2xpZGVyLS1pdGVtLWN1cnJlbnRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggKyAxID09PSBzbGlkZXJJdGVtcy5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gaWR4ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVNsaWRlckl0ZW0oc2xpZGVySXRlbXNbaWR4XSwgc2xpZGVySXRlbXNbaXRlbV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oYnRuKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZCdG4gJiYgcHJldkJ0bi5kaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2QnRuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgc2xpZGVySXRlbXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVySXRlbXNbaWR4XS5jbGFzc0xpc3QuY29udGFpbnMoXCJzbGlkZXItLWl0ZW0tY3VycmVudFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCAtIDEgPCAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBpZHggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlU2xpZGVySXRlbShzbGlkZXJJdGVtc1tpZHhdLCBzbGlkZXJJdGVtc1tpdGVtXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGV2ZW50IGxpc3RlbmVyIGhhbmRsZXIsIGRldGVybWluaW5nIHRoZSBidG4gYW5kIGNhbGxpbmcgdGhlIHJpZ2h0IGFjdGlvblxuICAgICAgICBmdW5jdGlvbiBzQnRuSGFuZGxlcihldikge1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICBzd2l0Y2godGhpcy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInByZXZpb3VzLS1idG5cIjpcbiAgICAgICAgICAgICAgICAgICAgc0NvbnRyb2wucHJldmlvdXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHByZXZCdG4gPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibmV4dC0tYnRuXCI6XG4gICAgICAgICAgICAgICAgICAgIHNDb250cm9sLm5leHQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIG5leHRCdG4gPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbG9vcHMgdG8gYWRkIGV2ZW50IGxpc3RlbmVycyB0byBidG5zIGFuZCBpdGVyYXRpbmcgb3ZlciBzbGlkZXIgaXRlbXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXJCdG5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzbGlkZXJCdG5zW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzQnRuSGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBzbGlkZXJJdGVtcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBpZiAoaWR4ID09PSBzbGlkZXJJdGVtcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgc2xpZGVySXRlbXNbaWR4XS5jbGFzc0xpc3QuYWRkKFwic2xpZGVyLS1pdGVtLWN1cnJlbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJkb2N1bWVudCByZWFkeSFcIik7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBuYXZIYW5kbGVyKCkge1xuICAgICAgICB2YXIgaGFtQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoYW0tLWJ1dHRvblwiKTtcbiAgICAgICAgdmFyIG5hdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpbi0tbmF2XCIpO1xuXG4gICAgICAgIGhhbUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgaWYgKCFuYXYuY2xhc3NMaXN0LmNvbnRhaW5zKFwibmF2LS1zaG93blwiKSkge1xuICAgICAgICAgICAgICAgIG5hdi5jbGFzc0xpc3QuYWRkKFwibmF2LS1zaG93blwiKTtcbiAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgIG5hdi5jbGFzc0xpc3QucmVtb3ZlKFwibmF2LS1zaG93blwiKTtcbiAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IFxuXG4gICAgZG9jdW1lbnQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgIGluaXQoKTtcbiAgICAgICAgICAgIG5hdkhhbmRsZXIoKTtcbiAgICAgICAgICAgIGZvcm1zSGFuZGxlciA9IG5ldyBGb3Jtc0hhbmRsZXIoKTtcbiAgICAgICAgICAgIGZvcm1zSGFuZGxlci5pbml0KCk7XG4gICAgICAgICAgICBzbGlkZXJIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0oKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9hcHAuanMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);